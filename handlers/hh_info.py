from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types.input_file import FSInputFile
from aiogram.enums import ParseMode
from API.hh.graphical_display_vacancies import draw_diagram
from bot_logging.logger import logger

router_hh = Router()


@router_hh.message(Command('get_diagram_about_job'))
async def get_diagram_about_job(message: types.Message) -> None:
    '''–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
       –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ ip –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'''

    try:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ üéì –ø–æ —à–∞–±–ª–æ–Ω—É <b>"–ø—Ä–æ—Ñ–µ—Å—Å–∏—è: "</b>', parse_mode=ParseMode.HTML)

        # —à–∞–±–ª–æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–ª–∏
        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é
        @router_hh.message(F.text.contains('–ø—Ä–æ—Ñ–µ—Å—Å–∏—è: '))
        async def get_name_job(message: types.Message) -> None:
            await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞...')
            job = message.text.split('–ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ')
            draw_diagram(job)
            await message.answer_photo(FSInputFile('salary_chart.png'))

    except Exception as e:
        logger.log('error', f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ /get_diagram_about_job {str(e)}")
        await message.answer(
            '–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞, –≤ —Ç–µ—á–µ–Ω–∏–µ 6 —á–∞—Å–æ–≤ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞')
